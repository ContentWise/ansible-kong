---
- name: ensure user {{ kong_user }} exists
  user:
    name: "{{ kong_user }}"

- block:
    - name: install required dependencies
      package:
        name: "{{ item }}"
      when: 
      with_items:
        - openssl
        - libpcre3
        - procps
        - perl
    - name: install kong
      apt:
        deb: "{{ kong_deb_location }}"
      notify: reload kong
  when: ansible_os_family == 'Debian'

- block:
    - name: install required dependencies
      package:
        name: "{{ item }}"
      when: 
      with_items:
        - epel-release
    - name: install kong
      yum:
        name: "{{ kong_rpm_location }}"
        disable_gpg_check: true
      notify: reload kong
  when: ansible_os_family == 'RedHat'


- name: set permissions to kong directories
  file:
    path:  "{{ item }}"
    owner: "{{ kong_user }}"
    state: directory
  with_items:
    - "{{ kong_working_dir }}"
    - "{{ kong_log_dir }}"

- name: download custom plugins
  unarchive:
    src: "{{ item.url }}"
    dest: "/tmp"
    remote_src: true
  with_items: "{{ kong_custom_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  register: plugins_result

- name: install custom plugins
  command: /usr/local/bin/luarocks make
  args:
    chdir: "/tmp/{{ ( item.item.url | basename | splitext )[0] | regex_replace('\\.tar$','') }}"
  with_items: "{{ plugins_result.results | default([]) }}"
  loop_control:
    label: "{{ item.item.name }}"
  changed_when: false

- name: make sure logrotate is installed
  package:
    name: logrotate

- name: create logrotate config for Kong logs
  template:
    src:  logrotate.j2
    dest: /etc/logrotate.d/kong
    owner: "{{ kong_user }}"
  notify: reload kong

- name: write kong config
  template:
    dest: "{{ kong_conf_dir }}/kong.conf"
    group: "{{ kong_group }}"
    mode: 0644
    owner: "{{ kong_user }}"
    src: kong.conf.j2
  notify: reload kong

- name: create kong systemd script
  template:
    dest: /etc/systemd/system/kong.service
    mode: 0755
    src: kong.service.j2
  notify: reload kong

- name: wait for cassandra to respond
  wait_for:
    host: "{{ item }}"
    port: "{{ kong_cassandra_port }}"
  with_items: "{{ kong_cassandra_seeds }}"
  ignore_errors: yes

- name: ensure kong is started
  systemd:
    name: kong
    enabled: yes
    state: started
  register: service_result
  ignore_errors: yes

- name: check if migrations need to be run
  command: systemctl status kong
  register: service_status_result
  failed_when: no
  when: service_result | failed

- name: run migrations
  run_once: yes
  become_user: "{{ kong_user }}"
  command: "{{ kong_binary }} migrations up"
  register: migrations_result
  when: service_result | failed and service_status_result.stdout.find('missing migration')
  until: migrations_result.rc == 0

- name: ensure kong is started
  systemd:
    name: kong
    enabled: yes
    state: started
  when: service_result | failed


